{"version":3,"sources":["pages/ProcessMonitorPage/svc/get-running-processes.js","pages/ProcessMonitorPage/store.js","pages/ProcessMonitorPage/ProcessList/ProcessHeaderRow.js","pages/ProcessMonitorPage/ProcessList/ProcessContentRow.js","pages/ProcessMonitorPage/ProcessList/ProcessList.js","pages/ProcessMonitorPage/Sidebar/SearchResult.js","pages/ProcessMonitorPage/Sidebar/Sidebar.js","pages/ProcessMonitorPage/ProcessMonitorPage.js","pages/ProcessMonitorPage/index.js","constants.js"],"names":["getRunnintProcesses","a","url","constants","AGENT_HOST","axios","get","resp","runningProcesses","data","store","loading","processes","ProcessHeaderRow","ProcessContentRow","name","cpuUsage","memUsage","idx","$id","id","ProcessList","useGlobal","setLoading","setProcesses","useEffect","svc","getRunningProcesses","then","command","memory","cpu","_","zip","map","processName","shortid","generate","finally","className","processInfo","key","SearchResult","searchText","matchedProcesses","filter","p","startsWith","href","Sidebar","useState","setSearchText","type","value","onChange","e","target","placeholder","style","borderRight","ProcessMonitorPage","setGlobal","FILE_EXPLORER_ROOT"],"mappings":"+SAIe,SAAeA,IAA9B,+B,4CAAe,gCAAAC,EAAA,6DACPC,EADO,UACEC,EAAUC,WADZ,qBAEMC,IAAMC,IAAIJ,GAFhB,cAEPK,EAFO,OAGPC,EAAmBD,EAAKE,KAHjB,kBAIND,GAJM,4C,kCCCAE,EALD,CACZC,SAAS,EACTC,UAAW,I,2CCAE,SAASC,IACtB,OACE,4BACE,4BACE,wCAEF,4BACE,uCAEF,4BACE,4CAEF,4BACE,gDCZO,SAASC,EAAT,GAAoE,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IACzE,OACE,wBAAIC,GAAID,GACN,4BAAKD,GACL,4BAAKH,GACL,4BAAKC,GACL,4BAAKC,I,OCCI,SAASI,IAAe,IAAD,EACbC,oBAAU,WAAxBC,EAD2B,sBAEFD,oBAAU,aAFR,mBAE7BV,EAF6B,KAElBY,EAFkB,KAsBpC,OAlBAC,qBAAU,WACRF,GAAW,GACXG,EACGC,sBACAC,MAAK,YAA+B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,IAClBvB,EAAmBwB,IAAEC,IAAIJ,EAASC,EAAQC,GAAKG,KACnD,yCAAwC,CACtCC,YADF,KAEElB,SAFF,KAGED,SAHF,KAIEI,GAAIgB,IAAQC,eAGhBb,EAAahB,MAEd8B,SAAQ,kBAAMf,GAAW,QAC3B,IAGD,yBAAKgB,UAAU,+BACb,2BAAOA,UAAU,qBACf,+BACE,kBAAC1B,EAAD,OAEF,+BACGD,EAAUsB,KAAI,SAACM,EAAatB,GAAd,OACb,kBAACJ,EAAD,CACE2B,IAAKD,EAAYpB,GACjBD,IAAKqB,EAAYpB,GACjBF,IAAKA,EAAM,EACXH,KAAMyB,EAAYL,YAClBlB,SAAUuB,EAAYvB,SACtBD,SAAUwB,EAAYxB,iBC1CrB,SAAS0B,EAAT,GAAuC,IAAfC,EAAc,EAAdA,WAAc,EAC/BrB,oBAAU,aAExBsB,EAH6C,oBAGhBC,QACjC,SAAAC,GAAC,OAAIA,EAAEX,aAAeW,EAAEX,YAAYY,WAAWJ,MAGjD,OACE,2BAAOJ,UAAU,QACf,uBAAGA,UAAU,cAAb,iBACA,wBAAIA,UAAU,aACXK,EAAiBV,KAAI,SAAAY,GAAC,OACrB,wBAAIL,IAAKK,EAAE1B,IACT,uBAAG4B,KAAI,WAAMF,EAAE1B,KAAO0B,EAAEX,mB,OCZrB,SAASc,IAAW,IAAD,EACIC,mBAAS,IADb,mBACzBP,EADyB,KACbQ,EADa,KAGhC,OACE,yBAAKZ,UAAU,WACb,2BACEA,UAAU,iBACVa,KAAK,OACLC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIJ,EAAcI,EAAEC,OAAOH,QACtCI,YAAY,sBACZC,MAAO,CAAEC,YAAa,OAExB,kBAACjB,EAAD,CAAcC,WAAYA,K,OCXjB,SAASiB,IACtB,OACE,yBAAKrB,UAAU,sBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OALNsB,oBAAUnD,GCNV,yC,gCCAA,qGAAO,IAAMN,EAAa,OACb0D,EAAqB","file":"static/js/7.07df621c.chunk.js","sourcesContent":["import axios from 'axios'\n\nimport { constants } from '../vendors'\n\nexport default async function getRunnintProcesses() {\n  const url = `${constants.AGENT_HOST}/process`\n  const resp = await axios.get(url)\n  const runningProcesses = resp.data\n  return runningProcesses\n}\n","const store = {\n  loading: false,\n  processes: [],\n}\n\nexport default store","import React from 'react'\n\nexport default function ProcessHeaderRow() {\n  return (\n    <tr>\n      <th>\n        <abbr>Order</abbr>\n      </th>\n      <th>\n        <abbr>Name</abbr>\n      </th>\n      <th>\n        <abbr>CPU Usage</abbr>\n      </th>\n      <th>\n        <abbr>Memory Usage</abbr>\n      </th>\n    </tr>\n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function ProcessContentRow({ name, cpuUsage, memUsage, idx, $id }) {\n  return (\n    <tr id={$id}>\n      <td>{idx}</td>\n      <td>{name}</td>\n      <td>{cpuUsage}</td>\n      <td>{memUsage}</td>\n    </tr>\n  )\n}\n\nProcessContentRow.propTypes = {\n  name: PropTypes.string.isRequired,\n  cpuUsage: PropTypes.string.isRequired,\n  memUsage: PropTypes.string.isRequired,\n  idx: PropTypes.number.isRequired,\n  $id: PropTypes.string.isRequired,\n}\n","import React, { useEffect } from 'react'\nimport { useGlobal } from 'reactn'\nimport _ from 'lodash'\nimport shortid from 'shortid'\n\nimport { svc } from '../vendors'\nimport ProcessHeaderRow from './ProcessHeaderRow'\nimport ProcessContentRow from './ProcessContentRow'\nimport './ProcessList.scss'\n\nexport default function ProcessList() {\n  const [, setLoading] = useGlobal('loading')\n  const [processes, setProcesses] = useGlobal('processes')\n\n  useEffect(() => {\n    setLoading(true)\n    svc\n      .getRunningProcesses()\n      .then(({ command, memory, cpu }) => {\n        const runningProcesses = _.zip(command, memory, cpu).map(\n          ([processName, memUsage, cpuUsage]) => ({\n            processName,\n            memUsage,\n            cpuUsage,\n            id: shortid.generate()\n          })\n        )\n        setProcesses(runningProcesses)\n      })\n      .finally(() => setLoading(false))\n  }, [])\n\n  return (\n    <div className=\"ProcessList table-container\">\n      <table className=\"table is-bordered\">\n        <thead>\n          <ProcessHeaderRow />\n        </thead>\n        <tbody>\n          {processes.map((processInfo, idx) => (\n            <ProcessContentRow\n              key={processInfo.id}\n              $id={processInfo.id}\n              idx={idx + 1}\n              name={processInfo.processName}\n              memUsage={processInfo.memUsage}\n              cpuUsage={processInfo.cpuUsage}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useGlobal } from 'reactn'\nimport PropTypes from 'prop-types'\n\nexport default function SearchResult({ searchText }) {\n  const [processes] = useGlobal('processes')\n\n  const matchedProcesses = processes.filter(\n    p => p.processName && p.processName.startsWith(searchText)\n  )\n\n  return (\n    <aside className=\"menu\">\n      <p className=\"menu-label\">Search Result</p>\n      <ul className=\"menu-list\">\n        {matchedProcesses.map(p => (\n          <li key={p.id}>\n            <a href={`#${p.id}`}>{p.processName}</a>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  )\n}\n\nSearchResult.propTypes = {\n  searchText: PropTypes.string.isRequired,\n}\n","import React, { useState } from 'react'\n\nimport SearchResult from './SearchResult'\nimport './Sidebar.scss'\n\nexport default function Sidebar() {\n  const [searchText, setSearchText] = useState('')\n\n  return (\n    <div className=\"Sidebar\">\n      <input\n        className=\"input is-small\"\n        type=\"text\"\n        value={searchText}\n        onChange={e => setSearchText(e.target.value)}\n        placeholder=\"Search Process Name\"\n        style={{ borderRight: '0' }}\n      ></input>\n      <SearchResult searchText={searchText} />\n    </div>\n  )\n}\n","import React from 'react'\nimport {setGlobal} from 'reactn'\n\nimport { ProcessList, Sidebar, store } from './vendors'\nimport './ProcessMonitorPage.scss'\n\nsetGlobal(store)\nexport default function ProcessMonitorPage() {\n  return (\n    <div className=\"ProcessMonitorPage\">\n      <Sidebar />\n      <ProcessList />\n    </div>\n  )\n}\n","export { default } from './ProcessMonitorPage'\n","export const AGENT_HOST = '/api'\nexport const FILE_EXPLORER_ROOT = '/home'"],"sourceRoot":""}