{"version":3,"sources":["pages/SnapshotPage/SnapshotPage.js","pages/SnapshotPage/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","constants.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js"],"names":["SnapshotPage","useState","isPreviewing","setIsPreviewing","snapshotLink","constants","AGENT_HOST","Date","now","className","type","onClick","key","shortid","generate","src","alt","aria-label","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","FILE_EXPLORER_ROOT","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","filter","item","ind","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","REDUCE_TIME","version","str","seconds","random","format","number","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","mask","log","LN2","step","ceil","id","RegExp","replace","test"],"mappings":"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","file":"static/js/6.93a709ed.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport shortid from 'shortid'\n\nimport { constants } from './vendors'\nimport './SnapshotPage.scss'\n\nexport default function SnapshotPage() {\n  const [isPreviewing, setIsPreviewing] = useState(false)\n\n  // reload img ervery time rerender\n  const snapshotLink = `${constants.AGENT_HOST}/screenshot?a=${Date.now()}`\n\n  return (\n    <div className=\"SnapshotPage\">\n      <button\n        className=\"button is-primary is-outlined centered\"\n        type=\"button\"\n        onClick={() => setIsPreviewing(!isPreviewing)}\n      >\n        Click to take a Screenshot\n      </button>\n      {isPreviewing && (\n        <div className=\"modal is-active\">\n          <div className=\"modal-background\"></div>\n          <div className=\"modal-content\">\n            <p className=\"image is-4by3\">\n              <img key={shortid.generate()} src={snapshotLink} alt=\"\" />\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"modal-close is-large\"\n            aria-label=\"close\"\n            onClick={() => setIsPreviewing(false)}\n          ></button>\n        </div>\n      )}\n    </div>\n  )\n}\n","export { default } from './SnapshotPage'\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export const AGENT_HOST = '/api'\nexport const FILE_EXPLORER_ROOT = '/home'","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","module.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var i = step\n    var bytes = random(i)\n    while (i--) {\n      id += alphabet[bytes[i] & mask] || ''\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n"],"sourceRoot":""}