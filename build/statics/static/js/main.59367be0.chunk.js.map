{"version":3,"sources":["shares/Navbar/Navbar.js","shares/ProgressBar/ProgressBar.js","shares/LazyWrapper/LazyWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","src","alt","width","height","ProgressBar","ref","createRef","useEffect","$this","current","setBarLen","len","style","setAttribute","text","step","curPercent","progress","interval","setInterval","Math","round","atan","PI","clearInterval","LazyWrapper","Component","props","fallback","Page404","React","lazy","FileStoragePage","ProcessMonitorPage","SnapshotPage","WebcamPage","ScreenRecorderPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAKe,SAASA,IACtB,OACE,yBAAKC,UAAU,gCACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,cAAcC,GAAG,KAC/B,yBACEC,IAAI,yCACJC,IAAI,QACJC,MAAM,MACNC,OAAO,SAIb,yBAAKL,UAAU,eACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAMA,UAAU,cAAcC,GAAG,UAAjC,SACA,kBAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,aAAjC,WACA,kBAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,aAAjC,YACA,kBAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,WAAjC,UACA,kBAAC,IAAD,CAAMD,UAAU,cAAcC,GAAG,WAAjC,a,MCpBK,SAASK,IACtB,IAAMC,EAAMC,sBAgCZ,OA9BAC,qBAAU,WACR,IAAMC,EAAQH,EAAII,QACZC,EAAY,SAAAC,GAChBH,EAAMI,MAAMV,MAAZ,UAAuBS,EAAvB,KACAH,EAAMK,aAAa,gBAAiBF,GACpCH,EAAMM,KAAN,UAAgBH,EAAhB,MAGEI,EAAO,GACPC,EAAa,EACbC,EAAW,EAETC,EAAWC,aAAY,WAC3BH,GAAcD,EACdE,EACEG,KAAKC,MAAOD,KAAKE,KAAKN,IAAeI,KAAKG,GAAK,GAAM,IAAM,KAAQ,IACrEb,EAAUO,GACNA,GAAY,IACdO,cAAcN,GACLD,GAAY,KACrBF,EAAO,MAER,KAEH,OAAO,WACLL,EAAU,KACVc,cAAcN,OAKhB,yBACEb,IAAKA,EACLP,UAAU,sBACVc,MAAO,CAAEV,MAAO,SCtCP,SAASuB,EAAYC,GAClC,OAAO,SAAAC,GAAK,OACV,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACF,EAAcC,K,UCEfE,EAAUC,IAAMC,MAAK,kBAAM,kCAC3BC,EAAkBF,IAAMC,MAAK,kBAAM,8DACnCE,EAAqBH,IAAMC,MAAK,kBAAM,+DACtCG,EAAeJ,IAAMC,MAAK,kBAAM,iCAChCI,EAAaL,IAAMC,MAAK,kBAAM,iCAC9BK,EAAqBN,IAAMC,MAAK,kBAAM,iCAqB7BM,MAnBf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,IAAIC,UAAWf,EAAYO,KAC7C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,SAASC,UAAWf,EAAYO,KAClD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,YAAYC,UAAWf,EAAYQ,KACrD,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,UAAWf,EAAYS,KACrD,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,UAAUC,UAAWf,EAAYU,KACnD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,UAAUC,UAAWf,EAAYW,KACnD,kBAAC,IAAD,CAAOI,UAAWf,EAAYI,SCfpBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59367be0.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport './Navbar.scss'\n\nexport default function Navbar() {\n  return (\n    <nav className=\"Navbar navbar is-transparent\">\n      <div className=\"navbar-brand\">\n        <Link className=\"navbar-item\" to=\"/\">\n          <img\n            src=\"https://bulma.io/images/bulma-logo.png\"\n            alt=\"Brand\"\n            width=\"112\"\n            height=\"28\"\n          />\n        </Link>\n      </div>\n      <div className=\"navbar-menu\">\n        <div className=\"navbar-start\">\n          <Link className=\"navbar-item\" to=\"/files\">Files</Link>\n          <Link className=\"navbar-item\" to=\"/programs\">Program</Link>\n          <Link className=\"navbar-item\" to=\"/snapshot\">Snapshot</Link>\n          <Link className=\"navbar-item\" to=\"/webcam\">Webcam</Link>\n          <Link className=\"navbar-item\" to=\"/screen\">Screen</Link>\n        </div>\n      </div>\n    </nav>\n  )\n}\n","import React, { useEffect, createRef } from 'react'\n\nimport './ProgressBar.scss'\n\nexport default function ProgressBar() {\n  const ref = createRef()\n\n  useEffect(() => {\n    const $this = ref.current\n    const setBarLen = len => {\n      $this.style.width = `${len}%`\n      $this.setAttribute('aria-valuenow', len)\n      $this.text = `${len}%`\n    }\n\n    let step = 0.5\n    let curPercent = 0\n    let progress = 0\n\n    const interval = setInterval(() => {\n      curPercent += step\n      progress =\n        Math.round((Math.atan(curPercent) / (Math.PI / 2)) * 100 * 1000) / 1000\n      setBarLen(progress)\n      if (progress >= 100) {\n        clearInterval(interval)\n      } else if (progress >= 70) {\n        step = 0.1\n      }\n    }, 100)\n\n    return () => {\n      setBarLen(100)\n      clearInterval(interval)\n    }\n  })\n\n  return (\n    <div\n      ref={ref}\n      className=\"ProgressBar waiting\"\n      style={{ width: '34%' }}\n    ></div>\n  )\n}\n","import React, { Suspense } from 'react'\nimport ProgressBar from '../ProgressBar'\n\nexport default function LazyWrapper(Component) {\n  return props => (\n    <Suspense fallback={<ProgressBar />}>\n      <Component {...props} />\n    </Suspense>\n  )\n}","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport 'bulma/css/bulma.css'\n\nimport Navbar from './shares/Navbar'\nimport LazyWrapper from './shares/LazyWrapper'\nimport './App.scss'\n\nconst Page404 = React.lazy(() => import('./pages/Page404'))\nconst FileStoragePage = React.lazy(() => import('./pages/FileStoragePage'))\nconst ProcessMonitorPage = React.lazy(() => import('./pages/ProcessMonitorPage'))\nconst SnapshotPage = React.lazy(() => import('./pages/SnapshotPage'))\nconst WebcamPage = React.lazy(() => import('./pages/WebcamPage'))\nconst ScreenRecorderPage = React.lazy(() => import('./pages/ScreenRecorderPage'))\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={LazyWrapper(FileStoragePage)} />\n          <Route exact path=\"/files\" component={LazyWrapper(FileStoragePage)} />\n          <Route exact path=\"/programs\" component={LazyWrapper(ProcessMonitorPage)} />\n          <Route exact path=\"/snapshot\" component={LazyWrapper(SnapshotPage)} />\n          <Route exact path=\"/webcam\" component={LazyWrapper(WebcamPage)} />\n          <Route exact path=\"/screen\" component={LazyWrapper(ScreenRecorderPage)} />\n          <Route component={LazyWrapper(Page404)} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}